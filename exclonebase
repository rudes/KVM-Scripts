#!/bin/bash

##################################################
##                  VARIABLES                   ##
##    Set All Variables Before Using Script     ##
##################################################
# BASE_VM="BASE_VM"
# STORAGE_PATH="/PATH/TO/KVM/.IMG/FILES/"
# GUEST_SWAP="/dev/vda#"
# GUEST_ROOT="/dev/vda#"

# Get scripts execution location for ckguestip
SCRIPT_LOC=$(dirname $0)

if [ -z $BASE_VM ] || [ -z $STORAGE_PATH ] \
		|| [ -z $GUEST_SWAP ] || [ -z $GUEST_ROOT ];then
		echo -e "########################################################"
		echo -e "# !! PLEASE SET VARIABLES IN SCRIPT BEFORE RUNNING. !! #"
		echo -e "########################################################"
		exit 1
fi
# Get name for new VM, virt-clone the baseline VM under the new name
if [[ -z $1 ]];then
		read -p "New VM Name: " NEW_VM
else
		NEW_VM="$1"
fi
CHECK_IP() {
				while [ ping -c 1 $VM_IP &>/dev/null ];do sleep 1;done
}
echo -e "Cloning Baseline VM"
virt-clone -o $BASE_VM -n $NEW_VM -f "$STORAGE_PATH/$NEW_VM.img"
echo -e "Clone Complete"

# Start the VM and get the IP
echo -e "Starting $NEW_VM"
virsh start $NEW_VM
echo -e "Getting $NEW_VM's IP"
sleep 10
# Use ckguestip to get the ip for the new VM
while [[ -z $VM_IP ]];do
		VM_IP=$($SCRIPT_LOC/ckguestip $NEW_VM | grep [1-9] | awk '{printf $2}')
done
echo "$NEW_VM's IP: $VM_IP"

# Get storage size and ask to add storage
STORAGE_SIZE=$(ls -hl $STORAGE_PATH | grep $NEW_VM | awk '{printf $5}')
echo -e "Storage Size: $STORAGE_SIZE"
read -p "Add Storage? (ex: +10G or 'n' to skip): " NEW_SIZE
# If user decides to add storage shutdown VM, rezise .img file and start VM
if [[ -n "$NEW_SIZE" ]];then
	if [ "$NEW_SIZE" != "n" ];then
		virsh shutdown $NEW_VM
		sleep 15
		CHECK_IP

		qemu-img resize "$STORAGE_PATH/$NEW_VM.img" "$NEW_SIZE"
		
		echo -e "##############################################################"
		echo -e "# Entering SSH as root to Resize Storage and Change Hostname #"
		echo -e "# Run fdisk /dev/vda                                         #"
		echo -e "# Delete all partitions and rebuild with the extra storage   #"
		echo -e "# Write the Changes                                          #"
		echo -e "# Exit SSH to Reboot $NEW_VM                                 #"
		echo -e "##############################################################"

		virsh start $NEW_VM
		sleep 10
		CHECK_IP
		sleep 8
# SSH Into VM to repartition vda device, reboot the VM on exit
		ssh root@$VM_IP
		virsh reboot $NEW_VM

		echo -e "Waiting for $NEW_VM to reboot."
		sleep 15
		CHECK_IP
# Expand storage on new VM using resize2fs
		echo -e "Expanding new storage"
		ssh root@$VM_IP "
		resize2fs $GUEST_ROOT
# Create swap UUID after partitioning
		mkswap $GUEST_SWAP
		echo -e \"Setting new Swap ID in fstab\"
		OLD_UUID=\$(cat /etc/fstab | grep swap | grep UUID | awk '{print \$1}' | sed 's/UUID=//')
		echo -e \"Old Swap UUID: \$OLD_UUID\"
		NEW_UUID=\$(ls -l /dev/disk/by-uuid/ | grep \$(basename $GUEST_SWAP) | awk '{print \$9}')
		echo -e \"New Swap UUID: \$NEW_UUID\"
# Replace the old UUID with the new one
		sed -i 's/'\$OLD_UUID'/'\$NEW_UUID'/' /etc/fstab
# Display changes
		cat /etc/fstab
# Active swap
		swapon $GUEST_SWAP
		"
	fi
fi

echo
# Get hostname for new VM
read -p "New Hostname [$NEW_VM]: " NEW_HOST
if [ -z $NEW_HOST ];then NEW_HOST=$NEW_VM;fi

# Set hostname on VM via SSH
ssh root@$VM_IP "
OLD_HOST=\$(cat /etc/hostname)

echo -e \"Ammending New Hostname Line to /etc/hosts\\n\"

sed -i 's/'\$OLD_HOST'/'$NEW_HOST'/g' /etc/hosts
echo 'cat /etc/hosts';cat /etc/hosts
echo -e \"\\nSetting Hostname in /etc/hostname\\n\"

echo \"$NEW_HOST\" > /etc/hostname
echo 'cat /etc/hostname';cat /etc/hostname
echo -e \"\\nRestarting VM\"
reboot
"

# Ask to add vm name to hosts file for sshing via hostname
read -p "Add $NEW_VM to /etc/hosts?: " ANS
if [ "$ANS" = "y" ];then
		printf "%-20s %-20s\n" "$VM_IP" "$NEW_VM" >> /etc/hosts
		echo -e "cat /etc/hosts\n"
		cat /etc/hosts
fi
echo -e "Waiting for $NEW_VM to reboot."
sleep 15
CHECK_IP
# Ask to sync ssh key to new guest for passwordless entry
unset ANS
read -p "Sync SSH Keys?: " ANS
if [ $ANS == "y" ];then
			ssh-copy-id $VM_IP	
fi
# Once VM is finished rebooting let them know it's ready to go.
echo "$NEW_VM Ready to Go! at $VM_IP"

